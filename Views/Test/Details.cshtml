@model TestMe.ViewModels.SolveTestViewModel

@{
    ViewData["Title"] = "Solve Test";
}

<form asp-action="Details" method="post" class="test-form col-7 mx-auto details">
    @Html.AntiForgeryToken()
    <div class="form-group">
        <input asp-for="Title" class="test-title-input border-bottom form-control" readonly />
    </div>

    <div id="questions">
        @for (int i = 0; i < Model.Questions.Count; i++)
        {
            <div class="question py-4 border-top position-relative" id="question-@i">
                <div class="question-index">@(i + 1)</div>
                <div class="form-group d-flex align-items-center justify-between">
                    <input type="hidden" asp-for="Questions[i].Id" value="@Model.Questions[i].Id" />
                    <input type="text" asp-for="Questions[i].Text" class="question-input form-control" readonly />
                </div>
                <div class="options form-group d-flex flex-column form-group gap-3 mt-3">
                    @if (Model.Questions[i].Options != null && Model.Questions[i].Options.Count > 0)
                    {
                        @for (int j = 0; j < Model.Questions[i].Options.Count; j++)
                        {
                            <div class="option-box" data-question="@i" data-option="@j">
                                <input type="radio" asp-for="Questions[i].SelectedOption" value="@j" class="option-radio d-none" />
                                <input type="text" value="@Model.Questions[i].Options[j]" class="option-input form-control" readonly />
                            </div>
                        }
                    }
                </div>
            </div>
        }
    </div>

    <button type="submit" id="submit-button" class="btn btn-primary w-100 mt-3" disabled>Submit</button>
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
</form>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const options = document.querySelectorAll('.details .option-box');
            const submitButton = document.getElementById('submit-button');
            let selectedOptions = Array(@Model.Questions.Count).fill(false);

            options.forEach(option => {
                option.addEventListener('click', function () {
                    const questionIndex = this.dataset.question;
                    const optionIndex = this.dataset.option;
                    const radio = this.querySelector('.option-radio');

                    document.querySelectorAll(`.details [data-question="${questionIndex}"]`).forEach(el => {
                        el.classList.remove('selected');
                    });

                    this.classList.add('selected');
                    radio.checked = true;
                    selectedOptions[questionIndex] = true;
                    checkAllSelected();
                });

                //option.addEventListener('mouseover', function () {
                //    if (!this.classList.contains('selected')) {
                //        this.classList.add('hovered');
                //    }
                //});

                //option.addEventListener('mouseout', function () {
                //    this.classList.remove('hovered');
                //});
            });

            function checkAllSelected() {
                if (selectedOptions.every(v => v === true)) {
                    submitButton.disabled = false;
                } else {
                    submitButton.disabled = true;
                }
            }
        });
    </script>
}
